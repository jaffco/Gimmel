name: Multi-OS, Multi-Compiler Build

on:
  workflow_dispatch:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  jaffx-build:
    runs-on: ubuntu-22.04
    name: "JAFFX build"
    
    steps:
    - name: Clone JAFFX repository
      uses: actions/checkout@v4
      with:
        repository: jaffco/JAFFX
        submodules: recursive
    
    - name: Install ARM GCC Toolchain
      run: |
        # Install ARM GCC toolchain
        curl -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
        tar -xjf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 -C /opt
        sudo ln -s /opt/gcc-arm-none-eabi-10-2020-q4-major/bin/* /usr/local/bin
        rm gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
        
        # Verify toolchain installation
        arm-none-eabi-gcc --version
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y make bash curl bzip2 git
    
    - name: Initialize JAFFX repository
      run: |
        ./init.sh

    - name: Check out current Gimmel branch in JAFFX
      run: |
        cd Gimmel
        git fetch origin
        
        # Extract branch name and handle PRs
        if [[ "${{ github.ref }}" == refs/pull/* ]]; then
          echo "PR detected, using head branch: ${{ github.head_ref }}"
          HEAD_BRANCH="${{ github.head_ref }}"
          
          # Check if head branch exists on remote first
          if git ls-remote --heads origin $HEAD_BRANCH | grep -q $HEAD_BRANCH; then
            echo "Head branch $HEAD_BRANCH exists on remote, checking out"
            git fetch origin $HEAD_BRANCH:$HEAD_BRANCH || git fetch origin $HEAD_BRANCH
            git checkout $HEAD_BRANCH
          else
            echo "Head branch $HEAD_BRANCH does not exist in Gimmel repository, using base: ${{ github.base_ref }}"
            git checkout ${{ github.base_ref }} || git checkout main
          fi
        else
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Checking out branch: $BRANCH_NAME"
          
          # Check if branch exists on remote first
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch $BRANCH_NAME exists on remote, checking out"
            # Fetch the specific branch and create local tracking branch
            git fetch origin $BRANCH_NAME:$BRANCH_NAME || git fetch origin $BRANCH_NAME
            git checkout $BRANCH_NAME
          else
            echo "Branch $BRANCH_NAME does not exist in Gimmel repository, staying on default branch"
            echo "Available branches:"
            git branch -r
          fi
        fi
      shell: bash
    
    - name: Build src/main/main.cpp
      run: |
        cd src/main
        make

    - name: Build all JAFFX examples
      run: |
        echo "Building all examples in src/ directory:"
        
        # Find all directories in src/ that contain Makefiles
        for example_dir in src/*/; do
          if [ -f "${example_dir}Makefile" ]; then
            example_name=$(basename "$example_dir")
            echo "Building example: $example_name"
            
            cd "$example_dir"
            if make clean && make; then
              echo "✅ Successfully built $example_name"
            else
              echo "❌ Failed to build $example_name"
              exit 1
            fi
            cd - > /dev/null
          fi
        done
        
        echo "All examples built successfully!"
      shell: bash

    - name: List built artifacts
      run: |
        echo "Built artifacts:"
        find src/ -name "*.bin" -o -name "*.elf" -o -name "*.hex" | while read file; do
          echo "  $file ($(file "$file" | cut -d: -f2))"
        done
      shell: bash

  gimmel-test-build:
    runs-on: ${{ matrix.os }}
    name: "gimmel-test build"
    
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        include:
          - os: ubuntu-22.04
            name: Linux
          - os: windows-latest
            name: Windows
          - os: macos-latest
            name: macOS
    
    steps:
    - name: Clone gimmel-test repository
      uses: actions/checkout@v4
      with:
        repository: jaffco/gimmel-test
        submodules: recursive
    
    - name: Install gimmel-test dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libasound2-dev libjack-jackd2-dev \
          ladspa-sdk libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev \
          libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
          libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
        pip install scipy

    - name: Init Repo
      run: |
        ./init.sh
      shell: bash

    - name: Check out current Gimmel branch
      run: |
        cd include/Gimmel
        git fetch origin
        
        # Extract branch name and handle PRs
        if [[ "${{ github.ref }}" == refs/pull/* ]]; then
          echo "PR detected, using head branch: ${{ github.head_ref }}"
          HEAD_BRANCH="${{ github.head_ref }}"
          
          # Check if head branch exists on remote first
          if git ls-remote --heads origin $HEAD_BRANCH | grep -q $HEAD_BRANCH; then
            echo "Head branch $HEAD_BRANCH exists on remote, checking out"
            git fetch origin $HEAD_BRANCH:$HEAD_BRANCH || git fetch origin $HEAD_BRANCH
            git checkout $HEAD_BRANCH
          else
            echo "Head branch $HEAD_BRANCH does not exist in Gimmel repository, using base: ${{ github.base_ref }}"
            git checkout ${{ github.base_ref }} || git checkout main
          fi
        else
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Checking out branch: $BRANCH_NAME"
          
          # Check if branch exists on remote first
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch $BRANCH_NAME exists on remote, checking out"
            # Fetch the specific branch and create local tracking branch
            git fetch origin $BRANCH_NAME:$BRANCH_NAME || git fetch origin $BRANCH_NAME
            git checkout $BRANCH_NAME
          else
            echo "Branch $BRANCH_NAME does not exist in Gimmel repository, staying on default branch"
            echo "Available branches:"
            git branch -r
          fi
        fi
      shell: bash

    - name: Build Plugin
      run: |
        ./run.sh
      shell: bash
    
    - name: List build artifacts
      run: |
        echo "Build directory contents:"
        find build -name "*.vst3" -o -name "*.component" -o -name "*.app" -o -name "*.exe" 2>/dev/null || true
        ls -la build/GIMMEL-TEST_artefacts/ 2>/dev/null || true
      shell: bash

  gimmel-benchmark:
    runs-on: ${{ matrix.os }}
    name: "Gimmel Benchmark (${{ matrix.name }})"
    
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        include:
          - os: ubuntu-22.04
            name: Linux
          - os: windows-latest
            name: Windows
          - os: macos-latest
            name: macOS
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install build dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install build dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install build dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.3

    - name: Run benchmark tests
      run: |
        cd test
        chmod +x run.sh
        ./run.sh --all --verbose
      shell: bash

    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ matrix.name }}
        path: |
          test/build/micro_benchmark*
          test/build/full_benchmark*
        retention-days: 7
